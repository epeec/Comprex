// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DNN.proto

#ifndef PROTOBUF_DNN_2eproto__INCLUDED
#define PROTOBUF_DNN_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace myDNN {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DNN_2eproto();
void protobuf_AssignDesc_DNN_2eproto();
void protobuf_ShutdownFile_DNN_2eproto();

class Net;
class Net_Layer;

// ===================================================================

class Net_Layer : public ::google::protobuf::Message {
 public:
  Net_Layer();
  virtual ~Net_Layer();

  Net_Layer(const Net_Layer& from);

  inline Net_Layer& operator=(const Net_Layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Net_Layer& default_instance();

  void Swap(Net_Layer* other);

  // implements Message ----------------------------------------------

  Net_Layer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Net_Layer& from);
  void MergeFrom(const Net_Layer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated float data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // optional string comment = 4 [default = ""];
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:myDNN.Net.Layer)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DNN_2eproto();
  friend void protobuf_AssignDesc_DNN_2eproto();
  friend void protobuf_ShutdownFile_DNN_2eproto();

  void InitAsDefaultInstance();
  static Net_Layer* default_instance_;
};
// -------------------------------------------------------------------

class Net : public ::google::protobuf::Message {
 public:
  Net();
  virtual ~Net();

  Net(const Net& from);

  inline Net& operator=(const Net& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Net& default_instance();

  void Swap(Net* other);

  // implements Message ----------------------------------------------

  Net* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Net& from);
  void MergeFrom(const Net& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Net_Layer Layer;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .myDNN.Net.Layer layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::myDNN::Net_Layer& layers(int index) const;
  inline ::myDNN::Net_Layer* mutable_layers(int index);
  inline ::myDNN::Net_Layer* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::myDNN::Net_Layer >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::myDNN::Net_Layer >*
      mutable_layers();

  // optional string comment = 3 [default = ""];
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:myDNN.Net)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::myDNN::Net_Layer > layers_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DNN_2eproto();
  friend void protobuf_AssignDesc_DNN_2eproto();
  friend void protobuf_ShutdownFile_DNN_2eproto();

  void InitAsDefaultInstance();
  static Net* default_instance_;
};
// ===================================================================


// ===================================================================

// Net_Layer

// required string name = 1;
inline bool Net_Layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Net_Layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Net_Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Net_Layer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Net_Layer::name() const {
  return *name_;
}
inline void Net_Layer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Net_Layer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Net_Layer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Net_Layer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Net_Layer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Net_Layer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 shape = 2;
inline int Net_Layer::shape_size() const {
  return shape_.size();
}
inline void Net_Layer::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Net_Layer::shape(int index) const {
  return shape_.Get(index);
}
inline void Net_Layer::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
}
inline void Net_Layer::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Net_Layer::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Net_Layer::mutable_shape() {
  return &shape_;
}

// repeated float data = 3 [packed = true];
inline int Net_Layer::data_size() const {
  return data_.size();
}
inline void Net_Layer::clear_data() {
  data_.Clear();
}
inline float Net_Layer::data(int index) const {
  return data_.Get(index);
}
inline void Net_Layer::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void Net_Layer::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Net_Layer::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Net_Layer::mutable_data() {
  return &data_;
}

// optional string comment = 4 [default = ""];
inline bool Net_Layer::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Net_Layer::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Net_Layer::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Net_Layer::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Net_Layer::comment() const {
  return *comment_;
}
inline void Net_Layer::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Net_Layer::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Net_Layer::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Net_Layer::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Net_Layer::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Net_Layer::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Net

// required string name = 1;
inline bool Net::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Net::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Net::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Net::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Net::name() const {
  return *name_;
}
inline void Net::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Net::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Net::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Net::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Net::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Net::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .myDNN.Net.Layer layers = 2;
inline int Net::layers_size() const {
  return layers_.size();
}
inline void Net::clear_layers() {
  layers_.Clear();
}
inline const ::myDNN::Net_Layer& Net::layers(int index) const {
  return layers_.Get(index);
}
inline ::myDNN::Net_Layer* Net::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::myDNN::Net_Layer* Net::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::myDNN::Net_Layer >&
Net::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::myDNN::Net_Layer >*
Net::mutable_layers() {
  return &layers_;
}

// optional string comment = 3 [default = ""];
inline bool Net::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Net::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Net::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Net::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Net::comment() const {
  return *comment_;
}
inline void Net::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Net::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Net::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Net::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Net::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Net::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace myDNN

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DNN_2eproto__INCLUDED
