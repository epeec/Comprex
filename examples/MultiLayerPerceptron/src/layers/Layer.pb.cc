// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Layer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Layer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Layer {

namespace {

const ::google::protobuf::Descriptor* layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* layer_Tensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  layer_Tensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* layer_Kernel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  layer_Kernel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Layer_2eproto() {
  protobuf_AddDesc_Layer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Layer.proto");
  GOOGLE_CHECK(file != NULL);
  layer_descriptor_ = file->message_type(0);
  static const int layer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, grad_backprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, kernel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, grad_filter_),
  };
  layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      layer_descriptor_,
      layer::default_instance_,
      layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(layer));
  layer_Tensor_descriptor_ = layer_descriptor_->nested_type(0);
  static const int layer_Tensor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Tensor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Tensor, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Tensor, data_),
  };
  layer_Tensor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      layer_Tensor_descriptor_,
      layer_Tensor::default_instance_,
      layer_Tensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Tensor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Tensor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(layer_Tensor));
  layer_Kernel_descriptor_ = layer_descriptor_->nested_type(1);
  static const int layer_Kernel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, strides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, padding_),
  };
  layer_Kernel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      layer_Kernel_descriptor_,
      layer_Kernel::default_instance_,
      layer_Kernel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(layer_Kernel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(layer_Kernel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Layer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    layer_descriptor_, &layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    layer_Tensor_descriptor_, &layer_Tensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    layer_Kernel_descriptor_, &layer_Kernel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Layer_2eproto() {
  delete layer::default_instance_;
  delete layer_reflection_;
  delete layer_Tensor::default_instance_;
  delete layer_Tensor_reflection_;
  delete layer_Kernel::default_instance_;
  delete layer_Kernel_reflection_;
}

void protobuf_AddDesc_Layer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Layer.proto\022\005Layer\"\355\002\n\005layer\022\014\n\004name\030\001"
    " \001(\t\022\"\n\005input\030\002 \002(\0132\023.Layer.layer.Tensor"
    "\022#\n\006output\030\003 \002(\0132\023.Layer.layer.Tensor\022*\n"
    "\rgrad_backprop\030\004 \001(\0132\023.Layer.layer.Tenso"
    "r\022#\n\006kernel\030\005 \001(\0132\023.Layer.layer.Kernel\022("
    "\n\013grad_filter\030\006 \001(\0132\023.Layer.layer.Tensor"
    "\0327\n\006Tensor\022\014\n\004name\030\001 \001(\t\022\r\n\005shape\030\002 \003(\005\022"
    "\020\n\004data\030\003 \003(\002B\002\020\001\032Y\n\006Kernel\022\014\n\004name\030\001 \001("
    "\t\022\r\n\005shape\030\002 \003(\005\022\020\n\004data\030\003 \003(\002B\002\020\001\022\017\n\007st"
    "rides\030\004 \003(\005\022\017\n\007padding\030\005 \001(\t", 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Layer.proto", &protobuf_RegisterTypes);
  layer::default_instance_ = new layer();
  layer_Tensor::default_instance_ = new layer_Tensor();
  layer_Kernel::default_instance_ = new layer_Kernel();
  layer::default_instance_->InitAsDefaultInstance();
  layer_Tensor::default_instance_->InitAsDefaultInstance();
  layer_Kernel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Layer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Layer_2eproto {
  StaticDescriptorInitializer_Layer_2eproto() {
    protobuf_AddDesc_Layer_2eproto();
  }
} static_descriptor_initializer_Layer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int layer_Tensor::kNameFieldNumber;
const int layer_Tensor::kShapeFieldNumber;
const int layer_Tensor::kDataFieldNumber;
#endif  // !_MSC_VER

layer_Tensor::layer_Tensor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void layer_Tensor::InitAsDefaultInstance() {
}

layer_Tensor::layer_Tensor(const layer_Tensor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void layer_Tensor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

layer_Tensor::~layer_Tensor() {
  SharedDtor();
}

void layer_Tensor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void layer_Tensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* layer_Tensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return layer_Tensor_descriptor_;
}

const layer_Tensor& layer_Tensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Layer_2eproto();
  return *default_instance_;
}

layer_Tensor* layer_Tensor::default_instance_ = NULL;

layer_Tensor* layer_Tensor::New() const {
  return new layer_Tensor;
}

void layer_Tensor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  shape_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool layer_Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shape())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void layer_Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* layer_Tensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shape(i), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int layer_Tensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  // repeated float data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void layer_Tensor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const layer_Tensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const layer_Tensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void layer_Tensor::MergeFrom(const layer_Tensor& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void layer_Tensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void layer_Tensor::CopyFrom(const layer_Tensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool layer_Tensor::IsInitialized() const {

  return true;
}

void layer_Tensor::Swap(layer_Tensor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    shape_.Swap(&other->shape_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata layer_Tensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = layer_Tensor_descriptor_;
  metadata.reflection = layer_Tensor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int layer_Kernel::kNameFieldNumber;
const int layer_Kernel::kShapeFieldNumber;
const int layer_Kernel::kDataFieldNumber;
const int layer_Kernel::kStridesFieldNumber;
const int layer_Kernel::kPaddingFieldNumber;
#endif  // !_MSC_VER

layer_Kernel::layer_Kernel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void layer_Kernel::InitAsDefaultInstance() {
}

layer_Kernel::layer_Kernel(const layer_Kernel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void layer_Kernel::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  padding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

layer_Kernel::~layer_Kernel() {
  SharedDtor();
}

void layer_Kernel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (padding_ != &::google::protobuf::internal::kEmptyString) {
    delete padding_;
  }
  if (this != default_instance_) {
  }
}

void layer_Kernel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* layer_Kernel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return layer_Kernel_descriptor_;
}

const layer_Kernel& layer_Kernel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Layer_2eproto();
  return *default_instance_;
}

layer_Kernel* layer_Kernel::default_instance_ = NULL;

layer_Kernel* layer_Kernel::New() const {
  return new layer_Kernel;
}

void layer_Kernel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_padding()) {
      if (padding_ != &::google::protobuf::internal::kEmptyString) {
        padding_->clear();
      }
    }
  }
  shape_.Clear();
  data_.Clear();
  strides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool layer_Kernel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shape())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strides;
        break;
      }

      // repeated int32 strides = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_strides())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_strides())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strides;
        if (input->ExpectTag(42)) goto parse_padding;
        break;
      }

      // optional string padding = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_padding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->padding().data(), this->padding().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void layer_Kernel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated int32 strides = 4;
  for (int i = 0; i < this->strides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->strides(i), output);
  }

  // optional string padding = 5;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->padding().data(), this->padding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->padding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* layer_Kernel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shape(i), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated int32 strides = 4;
  for (int i = 0; i < this->strides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->strides(i), target);
  }

  // optional string padding = 5;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->padding().data(), this->padding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->padding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int layer_Kernel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string padding = 5;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->padding());
    }

  }
  // repeated int32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  // repeated float data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 strides = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->strides_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->strides(i));
    }
    total_size += 1 * this->strides_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void layer_Kernel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const layer_Kernel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const layer_Kernel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void layer_Kernel::MergeFrom(const layer_Kernel& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  data_.MergeFrom(from.data_);
  strides_.MergeFrom(from.strides_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_padding()) {
      set_padding(from.padding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void layer_Kernel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void layer_Kernel::CopyFrom(const layer_Kernel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool layer_Kernel::IsInitialized() const {

  return true;
}

void layer_Kernel::Swap(layer_Kernel* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    shape_.Swap(&other->shape_);
    data_.Swap(&other->data_);
    strides_.Swap(&other->strides_);
    std::swap(padding_, other->padding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata layer_Kernel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = layer_Kernel_descriptor_;
  metadata.reflection = layer_Kernel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int layer::kNameFieldNumber;
const int layer::kInputFieldNumber;
const int layer::kOutputFieldNumber;
const int layer::kGradBackpropFieldNumber;
const int layer::kKernelFieldNumber;
const int layer::kGradFilterFieldNumber;
#endif  // !_MSC_VER

layer::layer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void layer::InitAsDefaultInstance() {
  input_ = const_cast< ::Layer::layer_Tensor*>(&::Layer::layer_Tensor::default_instance());
  output_ = const_cast< ::Layer::layer_Tensor*>(&::Layer::layer_Tensor::default_instance());
  grad_backprop_ = const_cast< ::Layer::layer_Tensor*>(&::Layer::layer_Tensor::default_instance());
  kernel_ = const_cast< ::Layer::layer_Kernel*>(&::Layer::layer_Kernel::default_instance());
  grad_filter_ = const_cast< ::Layer::layer_Tensor*>(&::Layer::layer_Tensor::default_instance());
}

layer::layer(const layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void layer::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = NULL;
  output_ = NULL;
  grad_backprop_ = NULL;
  kernel_ = NULL;
  grad_filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

layer::~layer() {
  SharedDtor();
}

void layer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete input_;
    delete output_;
    delete grad_backprop_;
    delete kernel_;
    delete grad_filter_;
  }
}

void layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return layer_descriptor_;
}

const layer& layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Layer_2eproto();
  return *default_instance_;
}

layer* layer::default_instance_ = NULL;

layer* layer::New() const {
  return new layer;
}

void layer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_input()) {
      if (input_ != NULL) input_->::Layer::layer_Tensor::Clear();
    }
    if (has_output()) {
      if (output_ != NULL) output_->::Layer::layer_Tensor::Clear();
    }
    if (has_grad_backprop()) {
      if (grad_backprop_ != NULL) grad_backprop_->::Layer::layer_Tensor::Clear();
    }
    if (has_kernel()) {
      if (kernel_ != NULL) kernel_->::Layer::layer_Kernel::Clear();
    }
    if (has_grad_filter()) {
      if (grad_filter_ != NULL) grad_filter_->::Layer::layer_Tensor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // required .Layer.layer.Tensor input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        break;
      }

      // required .Layer.layer.Tensor output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_grad_backprop;
        break;
      }

      // optional .Layer.layer.Tensor grad_backprop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grad_backprop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grad_backprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kernel;
        break;
      }

      // optional .Layer.layer.Kernel kernel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_grad_filter;
        break;
      }

      // optional .Layer.layer.Tensor grad_filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grad_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grad_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .Layer.layer.Tensor input = 2;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->input(), output);
  }

  // required .Layer.layer.Tensor output = 3;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->output(), output);
  }

  // optional .Layer.layer.Tensor grad_backprop = 4;
  if (has_grad_backprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->grad_backprop(), output);
  }

  // optional .Layer.layer.Kernel kernel = 5;
  if (has_kernel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kernel(), output);
  }

  // optional .Layer.layer.Tensor grad_filter = 6;
  if (has_grad_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->grad_filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Layer.layer.Tensor input = 2;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->input(), target);
  }

  // required .Layer.layer.Tensor output = 3;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->output(), target);
  }

  // optional .Layer.layer.Tensor grad_backprop = 4;
  if (has_grad_backprop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->grad_backprop(), target);
  }

  // optional .Layer.layer.Kernel kernel = 5;
  if (has_kernel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kernel(), target);
  }

  // optional .Layer.layer.Tensor grad_filter = 6;
  if (has_grad_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->grad_filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Layer.layer.Tensor input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input());
    }

    // required .Layer.layer.Tensor output = 3;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

    // optional .Layer.layer.Tensor grad_backprop = 4;
    if (has_grad_backprop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grad_backprop());
    }

    // optional .Layer.layer.Kernel kernel = 5;
    if (has_kernel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kernel());
    }

    // optional .Layer.layer.Tensor grad_filter = 6;
    if (has_grad_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grad_filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void layer::MergeFrom(const layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_input()) {
      mutable_input()->::Layer::layer_Tensor::MergeFrom(from.input());
    }
    if (from.has_output()) {
      mutable_output()->::Layer::layer_Tensor::MergeFrom(from.output());
    }
    if (from.has_grad_backprop()) {
      mutable_grad_backprop()->::Layer::layer_Tensor::MergeFrom(from.grad_backprop());
    }
    if (from.has_kernel()) {
      mutable_kernel()->::Layer::layer_Kernel::MergeFrom(from.kernel());
    }
    if (from.has_grad_filter()) {
      mutable_grad_filter()->::Layer::layer_Tensor::MergeFrom(from.grad_filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void layer::CopyFrom(const layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void layer::Swap(layer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(input_, other->input_);
    std::swap(output_, other->output_);
    std::swap(grad_backprop_, other->grad_backprop_);
    std::swap(kernel_, other->kernel_);
    std::swap(grad_filter_, other->grad_filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = layer_descriptor_;
  metadata.reflection = layer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Layer

// @@protoc_insertion_point(global_scope)
